from fastapi import FastAPI, HTTPException, Path, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List

# Создаем приложение
app = FastAPI()

# Шаблоны Jinja2
templates = Jinja2Templates(directory="templates")

# Модель пользователя
class User(BaseModel):
    id: int
    username: str
    age: int

# Список пользователей
users: List[User] = []

# GET запрос на корневую страницу - отображение всех пользователей
@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    return templates.TemplateResponse("users.html", {"request": request, "users": users, "user": None})

# GET запрос для отображения конкретного пользователя
@app.get("/user/{user_id}", response_class=HTMLResponse)
def get_user(request: Request, user_id: int):
    for user in users:
        if user.id == user_id:
            return templates.TemplateResponse("users.html", {"request": request, "users": [], "user": user})
    raise HTTPException(status_code=404, detail="User was not found")

# POST запрос - добавление нового пользователя
@app.post("/user/{username}/{age}")
def add_user(
    username: str = Path(..., min_length=5, max_length=20),
    age: int = Path(..., ge=18, le=120),
):
    user_id = users[-1].id + 1 if users else 1
    new_user = User(id=user_id, username=username, age=age)
    users.append(new_user)
    return new_user

# PUT запрос - обновление данных пользователя
@app.put("/user/{user_id}/{username}/{age}")
def update_user(
    user_id: int,
    username: str = Path(..., min_length=5, max_length=20),
    age: int = Path(..., ge=18, le=120),
):
    for user in users:
        if user.id == user_id:
            user.username = username
            user.age = age
            return user
    raise HTTPException(status_code=404, detail="User was not found")

# DELETE запрос - удаление пользователя
@app.delete("/user/{user_id}")
def delete_user(user_id: int):
    for user in users:
        if user.id == user_id:
            users.remove(user)
            return user
    raise HTTPException(status_code=404, detail="User was not found")
